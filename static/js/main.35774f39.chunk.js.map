{"version":3,"sources":["components/Header/Header.jsx","images/avatar.jpg","utils/styles.js","functions/makeId.js","functions/makeEmpty.js","functions/randomInt.js","components/HiddenWords/HiddenWords.jsx","functions/findLongestString.js","hooks/useWindowSize.js","hooks/useCooldownEffect.js","components/Home/Home.jsx","components/Portfolio/Portfolio.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["Header","className","to","linkColor","color","characters","charactersLength","length","makeId","result","i","push","charAt","Math","floor","random","makeEmptyArray","Array","trunc","fill","randomInt","max","WORD_INDEX_SEPARATOR","MAXIMUM_BOARD_SIZE","initialBoard","width","height","makeIdMatrix","makeHiddenWords","words","arr","longestWordLength","reduce","a","b","quantity","randomGrid","map","makeEmptyMatrix","forEach","word","wordIndex","grid","shouldMoveRight","shouldMoveDown","randomStartingWidth","randomStartingHeight","wordCharacters","split","initialVerticalCell","currentHorizontalCell","currentVerticalCell","char","currentGridLine","index","character","insertHiddenWord","replaceArrayCenter","mainArray","insertedArray","arrayToReturn","middleIndex","currentIndexOfInsertedArray","currentElementOfInsertedArray","trim","HiddenWords","useState","size","setSize","updateSize","window","innerWidth","innerHeight","useLayoutEffect","addEventListener","removeEventListener","useWindowSize","hiddenWords","setHiddenWords","recalculateHiddenWords","useCallback","isMobile","newWidth","newHeight","mainMatrix","insertedMatrix","matrixToReturn","currentIndexOfInsertedMatrix","currentArrayOfMainMatrix","currentArrayOfInsertedMatrix","replaceMatrixCenter","reactCallback","timeout","limiter","useRef","useEffect","clearTimeout","current","setTimeout","useCooldownEffect","onDoubleClick","row","rowIndex","column","columnIndex","id","customStyles","github","telegram","Home","author","name","src","avatar","alt","href","target","rel","style","Portfolio","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.35774f39.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\n\nimport './Header.scss';\n\nexport default function Header() {\n  return (\n    <header className=\"header\">\n      <nav className=\"header__links\">\n        <Link to=\"/\" className=\"header__logo\">\n          Арт Гинзбург\n        </Link>\n\n        <ul className=\"header__navigation\">\n          <Link to=\"/portfolio\" className=\"header__link\">\n            Портфолио\n          </Link>\n        </ul>\n      </nav>\n    </header>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/avatar.665f1a88.jpg\";","export function linkColor(color) {\n  return { '--link-color': color };\n}\n","const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\nconst charactersLength = characters.length;\n\nexport function makeId(length) {\n  const result = [];\n  let i = 0;\n  while (i < length) {\n    result.push(characters.charAt(Math.floor(Math.random() * charactersLength)));\n    i++;\n  }\n  return result;\n}\n\nexport function makeIdMatrix(width, height) {\n  const result = [];\n  let i = 0;\n  while (i < height) {\n    result.push(makeId(width));\n    i++;\n  }\n  return result;\n}\n","export function makeEmptyArray(length) {\n  return Array(Math.trunc(length)).fill();\n}\n\nexport function makeEmptyMatrix(width, height) {\n  return makeEmptyArray(height).map(() => makeEmptyArray(width));\n}\n","export function randomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n","import { useCallback, useState } from 'react';\n\nimport { makeIdMatrix } from '../../functions/makeId';\nimport { makeEmptyMatrix } from '../../functions/makeEmpty';\nimport { findLongestString } from '../../functions/findLongestString';\nimport { randomInt } from '../../functions/randomInt';\n\nimport { useCooldownEffect } from '../../hooks/useCooldownEffect';\nimport { useWindowSize } from '../../hooks/useWindowSize';\n\nimport './HiddenWords.scss';\n\nconst WORD_INDEX_SEPARATOR = '禕';\nconst MAXIMUM_BOARD_SIZE = 30;\n\nconst initialBoard = makeIdMatrix(MAXIMUM_BOARD_SIZE, MAXIMUM_BOARD_SIZE);\n\nfunction insertHiddenWord(word, wordIndex, grid, longestWordLength, length, quantity) {\n  const shouldMoveRight = Math.random() > 0.5;\n  const shouldMoveDown = !shouldMoveRight || Math.random() > 0.5;\n\n  const randomStartingWidth = shouldMoveRight\n    ? randomInt(length - longestWordLength + 1)\n    : randomInt(length - 1);\n\n  const randomStartingHeight = shouldMoveDown\n    ? randomInt(quantity - longestWordLength + 1)\n    : randomInt(quantity - 1);\n\n  const wordCharacters = word.split('');\n\n  const result = [];\n\n  const initialVerticalCell = randomStartingHeight;\n\n  let currentHorizontalCell = randomStartingWidth;\n  let currentVerticalCell = initialVerticalCell;\n\n  for (let i = 0; i < quantity; i++) {\n    const char = wordCharacters[i - initialVerticalCell];\n\n    const currentGridLine = grid[i];\n\n    if (!currentGridLine) {\n      // TODO: currentGridLine sometimes gets `undefined` here on small screens — and last character of a long word gets clipped. Really strange, shouldn't happen.\n      continue;\n    }\n\n    if (char && currentVerticalCell === i) {\n      if (shouldMoveDown) {\n        currentGridLine[currentHorizontalCell] = `${wordIndex}${WORD_INDEX_SEPARATOR}${char}`;\n      } else {\n        for (let index = 0; index < wordCharacters.length; index++) {\n          const character = wordCharacters[index];\n          currentGridLine[\n            currentHorizontalCell++\n          ] = `${wordIndex}${WORD_INDEX_SEPARATOR}${character}`;\n        }\n      }\n\n      result.push(currentGridLine);\n\n      if (shouldMoveRight) {\n        currentHorizontalCell++;\n      }\n      if (shouldMoveDown) {\n        currentVerticalCell++;\n      }\n    } else {\n      result.push(currentGridLine);\n    }\n  }\n\n  return result;\n}\n\nfunction makeHiddenWords(words, width, height) {\n  const longestWordLength = findLongestString(words).length;\n\n  const length = longestWordLength > width ? longestWordLength : width;\n  const quantity = longestWordLength > height ? longestWordLength : height;\n\n  let randomGrid = makeEmptyMatrix(length, quantity);\n  words.forEach((word, wordIndex) => {\n    randomGrid = insertHiddenWord(word, wordIndex, randomGrid, longestWordLength, length, quantity);\n  });\n  return randomGrid;\n}\n\nfunction replaceArrayCenter(mainArray, insertedArray) {\n  const arrayToReturn = [...mainArray];\n  if (!insertedArray) {\n    return arrayToReturn;\n  }\n  const middleIndex = Math.floor(arrayToReturn.length / 2) - Math.floor(insertedArray.length / 2);\n  let currentIndexOfInsertedArray = 0;\n  for (let i = middleIndex; i < middleIndex + insertedArray.length; i++) {\n    const currentElementOfInsertedArray = insertedArray[currentIndexOfInsertedArray];\n\n    if (\n      currentElementOfInsertedArray &&\n      currentElementOfInsertedArray.split(WORD_INDEX_SEPARATOR)[1].trim()\n    ) {\n      arrayToReturn[i] = currentElementOfInsertedArray;\n    }\n    currentIndexOfInsertedArray++;\n  }\n  return arrayToReturn;\n}\n\nfunction replaceMatrixCenter(mainMatrix, insertedMatrix) {\n  const matrixToReturn = [...mainMatrix];\n  const middleIndex = Math.floor(matrixToReturn.length / 2) - Math.floor(insertedMatrix.length / 2);\n  let currentIndexOfInsertedMatrix = 0;\n  for (let i = middleIndex; i < middleIndex + insertedMatrix.length; i++) {\n    const currentArrayOfMainMatrix = matrixToReturn[i];\n    const currentArrayOfInsertedMatrix = insertedMatrix[currentIndexOfInsertedMatrix];\n    matrixToReturn[i] = replaceArrayCenter(currentArrayOfMainMatrix, currentArrayOfInsertedMatrix);\n    currentIndexOfInsertedMatrix++;\n  }\n  return matrixToReturn;\n}\n\nexport default function HiddenWords({ words }) {\n  const [width, height] = useWindowSize();\n\n  const [hiddenWords, setHiddenWords] = useState(initialBoard);\n\n  const recalculateHiddenWords = useCallback(() => {\n    const isMobile = height > width;\n    const newWidth = isMobile ? width / 40 : width / 60;\n    const newHeight = isMobile ? height / 52 : height / 85;\n\n    const controlledWidth = newWidth > MAXIMUM_BOARD_SIZE ? MAXIMUM_BOARD_SIZE : newWidth;\n    const controlledHeight = newHeight > MAXIMUM_BOARD_SIZE ? MAXIMUM_BOARD_SIZE : newHeight;\n\n    setHiddenWords(\n      replaceMatrixCenter(initialBoard, makeHiddenWords(words, controlledWidth, controlledHeight)),\n    );\n  }, [height, width, words]);\n\n  useCooldownEffect(recalculateHiddenWords);\n\n  return (\n    <div className=\"hiddenWords\" onDoubleClick={recalculateHiddenWords}>\n      {hiddenWords.map((row, rowIndex) => (\n        <p className=\"hiddenWords__char\" key={rowIndex}>\n          {row.map((column, columnIndex) => {\n            if (column.length === 1) {\n              return column;\n            }\n\n            const [wordIndex, char] = column.split(WORD_INDEX_SEPARATOR);\n\n            return (\n              <span\n                id={`char-${wordIndex}`}\n                className=\"hiddenWords__char-active\"\n                key={`${rowIndex}${columnIndex}`}\n              >\n                {char}\n              </span>\n            );\n          })}\n        </p>\n      ))}\n    </div>\n  );\n}\n","export function findLongestString(arr) {\n  return arr.reduce((a, b) => (a.length > b.length ? a : b), '');\n}\n","import { useLayoutEffect, useState } from 'react';\n\nexport function useWindowSize() {\n  const [size, setSize] = useState([0, 0]);\n\n  function updateSize() {\n    setSize([window.innerWidth, window.innerHeight]);\n  }\n\n  useLayoutEffect(() => {\n    window.addEventListener('resize', updateSize);\n    updateSize();\n\n    return () => {\n      window.removeEventListener('resize', updateSize);\n    };\n  }, []);\n\n  return size;\n}\n","import { useEffect, useRef } from 'react';\n\nexport function useCooldownEffect(reactCallback, timeout = 200) {\n  const limiter = useRef();\n\n  useEffect(() => {\n    clearTimeout(limiter.current);\n\n    limiter.current = setTimeout(reactCallback, timeout);\n  }, [reactCallback, timeout]);\n}\n","import { FaGithub, FaTelegramPlane } from 'react-icons/fa';\n\nimport { author } from '../../../package.json';\n\nimport avatar from '../../images/avatar.jpg';\nimport { linkColor } from '../../utils/styles';\n\nimport HiddenWords from '../HiddenWords/HiddenWords';\n\nimport './Home.scss';\n\nconst customStyles = {\n  github: linkColor('#83278f'), // 6e5494\n  telegram: linkColor('#28aaea'), // 0088cc\n};\n\nexport default function Home() {\n  return (\n    <section className=\"home\">\n      <HiddenWords words={['develop', 'software', author.name]} />\n\n      <img src={avatar} className=\"home__logo\" alt=\"avatar\" />\n      <p className=\"home__text\">Я Арт, пишу код</p>\n      <nav className=\"home__buttons\">\n        <a\n          className=\"home__button\"\n          href=\"https://github.com/artginzburg\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          style={customStyles.github}\n        >\n          <span className=\"home__button-icon\">\n            <FaGithub />\n          </span>\n          <p className=\"home__button-text\">Код</p>\n        </a>\n        <a\n          className=\"home__button\"\n          href=\"https://t.me/ginzart\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          style={customStyles.telegram}\n        >\n          <span className=\"home__button-icon\">\n            <FaTelegramPlane />\n          </span>\n          <p className=\"home__button-text\">Телеграм</p>\n        </a>\n      </nav>\n    </section>\n  );\n}\n","import './Portfolio.scss';\n\nexport default function Portfolio() {\n  return (\n    <section className=\"portfolio\">\n      <article>\n        <h2 className=\"portfolio__subtitle\">Фронтенд</h2>\n        <ul>\n          <li>\n            <a href=\"https://artginzburg.github.io/CASProject/\" target=\"_blank\" rel=\"noreferrer\">\n              3d school map\n            </a>\n          </li>\n          <li>\n            <a href=\"https://deeplomka.nomoredomains.club\" target=\"_blank\" rel=\"noreferrer\">\n              Movies Explorer\n            </a>\n          </li>\n        </ul>\n      </article>\n    </section>\n  );\n}\n","import { Switch, Route } from 'react-router-dom';\n\nimport Header from './components/Header/Header';\nimport Home from './components/Home/Home';\nimport Portfolio from './components/Portfolio/Portfolio';\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <main>\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/portfolio\">\n            <Portfolio />\n          </Route>\n        </Switch>\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function to log results (for example: reportWebVitals(console.log)) or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}