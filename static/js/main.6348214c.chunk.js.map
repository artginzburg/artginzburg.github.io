{"version":3,"sources":["images/avatar.jpg","utils/styles.js","functions/makeId.js","functions/makeEmpty.js","components/HiddenWords/HiddenWords.jsx","functions/findLongestString.js","hooks/useWindowSize.js","hooks/useTimeoutLimitedEffect.js","components/Home/Home.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["linkColor","color","characters","charactersLength","length","makeId","result","i","push","charAt","Math","floor","random","makeEmptyArray","Array","trunc","fill","WORD_INDEX_SEPARATOR","MAXIMUM_BOARD_SIZE","initialBoard","width","height","makeIdMatrix","makeHiddenWords","words","arr","longestWordLength","reduce","a","b","quantity","randomGrid","map","makeEmptyMatrix","forEach","word","wordIndex","wordCharacters","split","shouldMoveRight","shouldMoveDown","randomStartingWidth","randomGridReplaced","initialVerticalCell","currentHorizontalCell","currentVerticalCell","char","currentGridLine","index","character","replaceArrayCenter","mainArray","insertedArray","arrayToReturn","middleIndex","currentIndexOfInsertedArray","currentElementOfInsertedArray","trim","HiddenWords","useState","size","setSize","updateSize","window","innerWidth","innerHeight","useLayoutEffect","addEventListener","removeEventListener","useWindowSize","hiddenWords","setHiddenWords","reactCallback","timeout","limiter","useRef","useEffect","clearTimeout","current","setTimeout","useTimeoutLimitedEffect","useCallback","isMobile","newWidth","newHeight","mainMatrix","insertedMatrix","matrixToReturn","currentIndexOfInsertedMatrix","currentArrayOfMainMatrix","currentArrayOfInsertedMatrix","replaceMatrixCenter","className","row","rowIndex","column","columnIndex","id","customStyles","github","telegram","Home","author","name","src","avatar","alt","href","target","rel","style","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6348214c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/avatar.665f1a88.jpg\";","export function linkColor(color) {\n  return { '--link-color': color };\n}\n","const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\nconst charactersLength = characters.length;\n\nexport function makeId(length) {\n  const result = [];\n  let i = 0;\n  while (i < length) {\n    result.push(characters.charAt(Math.floor(Math.random() * charactersLength)));\n    i++;\n  }\n  return result;\n}\n\nexport function makeIdMatrix(width, height) {\n  const result = [];\n  let i = 0;\n  while (i < height) {\n    result.push(makeId(width));\n    i++;\n  }\n  return result;\n}\n","export function makeEmptyArray(length) {\n  return Array(Math.trunc(length)).fill();\n}\n\nexport function makeEmptyMatrix(width, height) {\n  return makeEmptyArray(height).map(() => makeEmptyArray(width));\n}\n","import { useCallback, useState } from 'react';\n\nimport { makeIdMatrix } from '../../functions/makeId';\nimport { makeEmptyMatrix } from '../../functions/makeEmpty';\nimport { findLongestString } from '../../functions/findLongestString';\n\nimport { useTimeoutLimitedEffect } from '../../hooks/useTimeoutLimitedEffect';\nimport { useWindowSize } from '../../hooks/useWindowSize';\n\nimport './HiddenWords.scss';\n\nconst WORD_INDEX_SEPARATOR = '禕';\nconst MAXIMUM_BOARD_SIZE = 30;\n\nconst initialBoard = makeIdMatrix(MAXIMUM_BOARD_SIZE, MAXIMUM_BOARD_SIZE);\n\nfunction makeHiddenWords(words, width, height) {\n  const longestWordLength = findLongestString(words).length;\n\n  const length = longestWordLength > width ? longestWordLength : width;\n  const quantity = longestWordLength > height ? longestWordLength : height;\n\n  let randomGrid = makeEmptyMatrix(length, quantity);\n\n  words.forEach((word, wordIndex) => {\n    const wordCharacters = word.split('');\n\n    const shouldMoveRight = Math.random() > 0.5;\n    const shouldMoveDown = !shouldMoveRight || Math.random() > 0.5;\n\n    const randomStartingWidth = shouldMoveRight\n      ? Math.floor(Math.random() * (length - longestWordLength + 1))\n      : Math.floor(Math.random() * (length - 1));\n\n    const randomStartingHeight = shouldMoveDown\n      ? Math.floor(Math.random() * (quantity - longestWordLength + 1))\n      : Math.floor(Math.random() * (quantity - 1));\n\n    const randomGridReplaced = [];\n\n    const initialVerticalCell = randomStartingHeight;\n\n    let currentHorizontalCell = randomStartingWidth;\n    let currentVerticalCell = initialVerticalCell;\n\n    for (let i = 0; i < quantity - 1; i++) {\n      const char = wordCharacters[i - initialVerticalCell];\n\n      let currentGridLine = randomGrid[i];\n\n      if (char && currentVerticalCell === i) {\n        if (shouldMoveDown) {\n          currentGridLine[currentHorizontalCell] = `${wordIndex}${WORD_INDEX_SEPARATOR}${char}`;\n        } else {\n          for (let index = 0; index < wordCharacters.length; index++) {\n            const character = wordCharacters[index];\n            currentGridLine[\n              currentHorizontalCell++\n            ] = `${wordIndex}${WORD_INDEX_SEPARATOR}${character}`;\n          }\n        }\n\n        randomGridReplaced.push(currentGridLine);\n\n        if (shouldMoveRight) {\n          currentHorizontalCell++;\n        }\n        if (shouldMoveDown) {\n          currentVerticalCell++;\n        }\n      } else {\n        randomGridReplaced.push(currentGridLine);\n      }\n    }\n\n    randomGrid = randomGridReplaced;\n  });\n  return randomGrid;\n}\n\nfunction replaceArrayCenter(mainArray, insertedArray) {\n  const arrayToReturn = [...mainArray];\n  const middleIndex = Math.floor(arrayToReturn.length / 2) - Math.floor(insertedArray.length / 2);\n  let currentIndexOfInsertedArray = 0;\n  for (let i = middleIndex; i < middleIndex + insertedArray.length; i++) {\n    const currentElementOfInsertedArray = insertedArray[currentIndexOfInsertedArray];\n\n    if (\n      currentElementOfInsertedArray &&\n      currentElementOfInsertedArray.split(WORD_INDEX_SEPARATOR)[1].trim()\n    ) {\n      arrayToReturn[i] = currentElementOfInsertedArray;\n    }\n    currentIndexOfInsertedArray++;\n  }\n  return arrayToReturn;\n}\n\nfunction replaceMatrixCenter(mainMatrix, insertedMatrix) {\n  const matrixToReturn = [...mainMatrix];\n  const middleIndex = Math.floor(matrixToReturn.length / 2) - Math.floor(insertedMatrix.length / 2);\n  let currentIndexOfInsertedMatrix = 0;\n  for (let i = middleIndex; i < middleIndex + insertedMatrix.length - 1; i++) {\n    const currentArrayOfMainMatrix = matrixToReturn[i];\n    const currentArrayOfInsertedMatrix = insertedMatrix[currentIndexOfInsertedMatrix];\n    matrixToReturn[i] = replaceArrayCenter(currentArrayOfMainMatrix, currentArrayOfInsertedMatrix);\n    currentIndexOfInsertedMatrix++;\n  }\n  return matrixToReturn;\n}\n\nexport default function HiddenWords({ words }) {\n  const [width, height] = useWindowSize();\n\n  const [hiddenWords, setHiddenWords] = useState(initialBoard);\n\n  const recalculateHiddenWords = useCallback(() => {\n    const isMobile = height > width;\n    const newWidth = isMobile ? width / 40 : width / 60;\n    const newHeight = isMobile ? height / 52 : height / 85;\n\n    const controlledWidth = newWidth > MAXIMUM_BOARD_SIZE ? MAXIMUM_BOARD_SIZE : newWidth;\n    const controlledHeight = newHeight > MAXIMUM_BOARD_SIZE ? MAXIMUM_BOARD_SIZE : newHeight;\n\n    setHiddenWords(\n      replaceMatrixCenter(initialBoard, makeHiddenWords(words, controlledWidth, controlledHeight)),\n    );\n  }, [height, width, words]);\n\n  useTimeoutLimitedEffect(recalculateHiddenWords);\n\n  return (\n    <div className=\"hiddenWords\">\n      {hiddenWords.map((row, rowIndex) => (\n        <p className=\"hiddenWords__char\" key={rowIndex}>\n          {row.map((column, columnIndex) => {\n            if (column.length === 1) {\n              return column;\n            }\n\n            const [wordIndex, char] = column.split(WORD_INDEX_SEPARATOR);\n\n            return (\n              <span\n                id={`char-${wordIndex}`}\n                className=\"hiddenWords__char-active\"\n                key={`${rowIndex}${columnIndex}`}\n              >\n                {char}\n              </span>\n            );\n          })}\n        </p>\n      ))}\n    </div>\n  );\n}\n","export function findLongestString(arr) {\n  return arr.reduce((a, b) => (a.length > b.length ? a : b), '');\n}\n","import { useLayoutEffect, useState } from 'react';\n\nexport function useWindowSize() {\n  const [size, setSize] = useState([0, 0]);\n\n  function updateSize() {\n    setSize([window.innerWidth, window.innerHeight]);\n  }\n\n  useLayoutEffect(() => {\n    window.addEventListener('resize', updateSize);\n    updateSize();\n\n    return () => {\n      window.removeEventListener('resize', updateSize);\n    };\n  }, []);\n\n  return size;\n}\n","import { useEffect, useRef } from 'react';\n\nexport function useTimeoutLimitedEffect(reactCallback, timeout = 200) {\n  const limiter = useRef();\n\n  useEffect(() => {\n    clearTimeout(limiter.current);\n\n    limiter.current = setTimeout(reactCallback, timeout);\n  }, [reactCallback, timeout]);\n}\n","import { FaGithub, FaTelegramPlane } from 'react-icons/fa';\n\nimport { author } from '../../../package.json';\n\nimport avatar from '../../images/avatar.jpg';\nimport { linkColor } from '../../utils/styles';\n\nimport HiddenWords from '../HiddenWords/HiddenWords';\n\nimport './Home.scss';\n\nconst customStyles = {\n  github: linkColor('#6e5494'),\n  telegram: linkColor('#0088cc'),\n};\n\nexport default function Home() {\n  return (\n    <section className=\"home\">\n      <HiddenWords words={['develop', 'software', author.name]} />\n\n      <img src={avatar} className=\"home__logo\" alt=\"avatar\" />\n      <p className=\"home__text\">Я Арт, пишу код</p>\n      <nav className=\"home__buttons\">\n        <a\n          className=\"home__button\"\n          href=\"https://github.com/artginzburg\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          style={customStyles.github}\n        >\n          <span className=\"home__button-icon\">\n            <FaGithub />\n          </span>\n          <p className=\"home__button-text\">Код</p>\n        </a>\n        <a\n          className=\"home__button\"\n          href=\"https://t.me/ginzart\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          style={customStyles.telegram}\n        >\n          <span className=\"home__button-icon\">\n            <FaTelegramPlane />\n          </span>\n          <p className=\"home__button-text\">Телеграм</p>\n        </a>\n      </nav>\n    </section>\n  );\n}\n","import Home from './components/Home/Home';\n\nfunction App() {\n  return (\n    <main>\n      <Home />\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function to log results (for example: reportWebVitals(console.log)) or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}