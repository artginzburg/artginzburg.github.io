{"version":3,"sources":["images/avatar.jpg","components/HiddenWords/HiddenWords.jsx","hooks/useWindowSize.js","hooks/useTimeoutLimitedEffect.js","components/Home/Home.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["makeId","length","result","characters","charactersLength","i","push","charAt","Math","floor","random","makeHiddenWords","words","width","height","longestWordLength","sort","a","b","quantity","randomGrid","Array","trunc","fill","map","makeEmptyMatrix","forEach","word","wordIndex","wordCharacters","split","shouldMoveRight","shouldMoveDown","randomStartingWidth","randomGridReplaced","initialVerticalCell","currentHorizontalCell","currentVerticalCell","char","currentGridLine","index","character","replaceArrayCenter","mainArray","insertedArray","middleIndex","currentIndexOfInsertedArray","currentElementOfInsertedArray","initialBoard","makeBoard","HiddenWords","useState","size","setSize","updateSize","window","innerWidth","innerHeight","useLayoutEffect","addEventListener","removeEventListener","useWindowSize","hiddenWords","setHiddenWords","reactCallback","timeout","limiter","useRef","useEffect","clearTimeout","current","setTimeout","useTimeoutLimitedEffect","useCallback","mainMatrix","insertedMatrix","currentIndexOfInsertedMatrix","currentArrayOfMainMatrix","currentArrayOfInsertedMatrix","replaceMatrixCenter","className","row","rowIndex","column","columnIndex","id","Home","src","avatar","alt","href","target","rel","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.905e7cc6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/avatar.665f1a88.jpg\";","import { useCallback, useState } from 'react';\n\nimport { useTimeoutLimitedEffect } from '../../hooks/useTimeoutLimitedEffect';\nimport { useWindowSize } from '../../hooks/useWindowSize';\n\nimport './HiddenWords.scss';\n\nfunction makeId(length) {\n  let result = [];\n  const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result.push(characters.charAt(Math.floor(Math.random() * charactersLength)));\n  }\n  return result;\n}\n\nfunction makeBoard(length, quantity) {\n  let result = [];\n  for (let i = 0; i < quantity; i++) {\n    result.push(makeId(length));\n  }\n  return result;\n}\n\nfunction makeEmptyMatrix(length, quantity) {\n  return Array(Math.trunc(quantity))\n    .fill()\n    .map(() => Array(Math.trunc(length)).fill());\n}\n\nfunction makeHiddenWords(words, width, height) {\n  const longestWordLength = [...words].sort((a, b) => b.length - a.length)[0].length;\n  const length = longestWordLength > width ? longestWordLength : width;\n  const quantity = longestWordLength > height ? longestWordLength : height;\n\n  var randomGrid = makeEmptyMatrix(length, quantity);\n\n  words.forEach((word, wordIndex) => {\n    const wordCharacters = word.split('');\n\n    const shouldMoveRight = Math.random() > 0.5;\n    const shouldMoveDown = !shouldMoveRight || Math.random() > 0.5;\n\n    const randomStartingWidth = shouldMoveRight\n      ? Math.floor(Math.random() * (length - longestWordLength + 1))\n      : Math.floor(Math.random() * (length - 1));\n\n    const randomStartingHeight = shouldMoveDown\n      ? Math.floor(Math.random() * (quantity - longestWordLength + 1))\n      : Math.floor(Math.random() * (quantity - 1));\n\n    const randomGridReplaced = [];\n\n    const initialVerticalCell = randomStartingHeight;\n\n    let currentHorizontalCell = randomStartingWidth;\n    let currentVerticalCell = initialVerticalCell;\n\n    for (let i = 0; i < quantity - 1; i++) {\n      const char = wordCharacters[i - initialVerticalCell];\n\n      let currentGridLine = randomGrid[i];\n\n      if (char && currentVerticalCell === i) {\n        if (shouldMoveDown) {\n          currentGridLine[currentHorizontalCell] = `${wordIndex} ${char}`;\n        } else {\n          for (let index = 0; index < wordCharacters.length; index++) {\n            const character = wordCharacters[index];\n            currentGridLine[currentHorizontalCell++] = `${wordIndex} ${character}`;\n          }\n        }\n\n        randomGridReplaced.push(currentGridLine);\n\n        if (shouldMoveRight) {\n          currentHorizontalCell++;\n        }\n        if (shouldMoveDown) {\n          currentVerticalCell++;\n        }\n      } else {\n        randomGridReplaced.push(currentGridLine);\n      }\n    }\n\n    randomGrid = randomGridReplaced;\n  });\n  return randomGrid;\n}\n\nfunction replaceArrayCenter(mainArray, insertedArray) {\n  const middleIndex = Math.floor(mainArray.length / 2) - Math.floor(insertedArray.length / 2);\n  let currentIndexOfInsertedArray = 0;\n  for (let i = middleIndex; i < middleIndex + insertedArray.length; i++) {\n    const currentElementOfInsertedArray = insertedArray[currentIndexOfInsertedArray];\n    if (currentElementOfInsertedArray) {\n      mainArray[i] = currentElementOfInsertedArray;\n    }\n    currentIndexOfInsertedArray++;\n  }\n  return mainArray;\n}\n\nfunction replaceMatrixCenter(mainMatrix, insertedMatrix) {\n  const middleIndex = Math.floor(mainMatrix.length / 2) - Math.floor(insertedMatrix.length / 2);\n  let currentIndexOfInsertedMatrix = 0;\n  for (let i = middleIndex; i < middleIndex + insertedMatrix.length - 1; i++) {\n    const currentArrayOfMainMatrix = mainMatrix[i];\n    const currentArrayOfInsertedMatrix = insertedMatrix[currentIndexOfInsertedMatrix];\n    mainMatrix[i] = replaceArrayCenter(currentArrayOfMainMatrix, currentArrayOfInsertedMatrix);\n    currentIndexOfInsertedMatrix++;\n  }\n  return mainMatrix;\n}\n\nconst initialBoard = makeBoard(30, 30);\n\nexport default function HiddenWords({ words }) {\n  const [width, height] = useWindowSize();\n\n  const [hiddenWords, setHiddenWords] = useState(initialBoard);\n\n  const recalculateHiddenWords = useCallback(() => {\n    setHiddenWords(null);\n    setHiddenWords(\n      replaceMatrixCenter(initialBoard, makeHiddenWords(words, width / 50, height / 50)),\n    );\n  }, [height, width, words]);\n\n  useTimeoutLimitedEffect(recalculateHiddenWords);\n\n  return (\n    <div className=\"hiddenWords\">\n      {hiddenWords &&\n        hiddenWords.map((row, rowIndex) => (\n          <p className=\"hiddenWords__char\" key={rowIndex}>\n            {row.map((column, columnIndex) => {\n              if (column.length === 1) {\n                return column;\n              }\n\n              const [wordIndex, char] = column.split(' ');\n\n              return (\n                <span\n                  id={`char-${wordIndex}`}\n                  className=\"hiddenWords__char-active\"\n                  key={`${rowIndex}${columnIndex}`}\n                >\n                  {char}\n                </span>\n              );\n            })}\n          </p>\n        ))}\n    </div>\n  );\n}\n","import { useLayoutEffect, useState } from 'react';\n\nexport function useWindowSize() {\n  const [size, setSize] = useState([0, 0]);\n\n  function updateSize() {\n    setSize([window.innerWidth, window.innerHeight]);\n  }\n\n  useLayoutEffect(() => {\n    window.addEventListener('resize', updateSize);\n    updateSize();\n\n    return () => {\n      window.removeEventListener('resize', updateSize);\n    };\n  }, []);\n\n  return size;\n}\n","import { useEffect, useRef } from 'react';\n\nexport function useTimeoutLimitedEffect(reactCallback, timeout = 200) {\n  const limiter = useRef();\n\n  useEffect(() => {\n    clearTimeout(limiter.current);\n\n    limiter.current = setTimeout(reactCallback, timeout);\n  }, [reactCallback, timeout]);\n}\n","import { FaGithub, FaTelegramPlane } from 'react-icons/fa';\n\nimport avatar from '../../images/avatar.jpg';\n\nimport HiddenWords from '../HiddenWords/HiddenWords';\n\nimport './Home.scss';\n\nexport default function Home() {\n  return (\n    <section className=\"home\">\n      <HiddenWords words={['develop', 'software', 'ginzburg']} />\n\n      <img src={avatar} className=\"home__logo\" alt=\"avatar\" />\n      <p>Я Арт, пишу код</p>\n      <nav className=\"home__buttons\">\n        <a\n          className=\"home__button\"\n          href=\"https://github.com/artginzburg\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <span className=\"home__button-icon\">\n            <FaGithub />\n          </span>\n          <p className=\"home__button-text\">Код</p>\n        </a>\n        <a\n          className=\"home__button\"\n          href=\"https://t.me/ginzart\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <span className=\"home__button-icon\">\n            <FaTelegramPlane />\n          </span>\n          <p className=\"home__button-text\">Телеграм</p>\n        </a>\n      </nav>\n    </section>\n  );\n}\n","import Home from './components/Home/Home';\n\nfunction App() {\n  return (\n    <main>\n      <Home />\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function to log results (for example: reportWebVitals(console.log)) or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}